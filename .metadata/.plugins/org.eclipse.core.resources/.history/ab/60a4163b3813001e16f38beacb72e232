/*
 * LCD.c
 *
 *  Created on: Jun 16, 2023
 *      Author: Hossam Ragab
 */
#include "LCD.h"
#include "GPIO.h"
#include <util/delay.h>

/*
 * Description :
 * function to setup LCD to be Ready to work
 * Setup the direction of the required pin:
 * 	1)Register Select--(Rs) as output pin
 * 	2)Enable Pin--(E) as output pin
 * 	3)Data Bus as output port
 * Delay >= 15 to power sequence
 * Command--0x38: 2-lines LCD 8-bits
 * Command--0x0C: LCD cursor off
 * Command--0x01: LCD clear
 */

void LCD_Init(void)
{

#if		(LCD_DATA_MODE == 4)
	/*Configure Rs and Enable Pins in 4-bits mode*/
	GPIO_SetupPinDirection(PORTA_ID, PIN1_ID, PIN_OUTPUT);
	GPIO_SetupPinDirection(PORTA_ID, PIN2_ID, PIN_OUTPUT);
	/*Configure data Pins in 4-bits mode*/
	GPIO_SetupPinDirection(PORTA_ID, PIN3_ID, PIN_OUTPUT);
	GPIO_SetupPinDirection(PORTA_ID, PIN4_ID, PIN_OUTPUT);
	GPIO_SetupPinDirection(PORTA_ID, PIN5_ID, PIN_OUTPUT);
	GPIO_SetupPinDirection(PORTA_ID, PIN6_ID, PIN_OUTPUT);
	LCD_SendCommand(0x33);
	LCD_SendCommand(0x32);
	LCD_SendCommand(LCD_TWO_LINES_4_BITS);

#elif	(LCD_DATA_MODE == 8)
	/*Configure Rs and Enable Pins in 8-bits mode*/
	GPIO_SetupPinDirection(PORTD_ID, PIN0_ID, PIN_OUTPUT);
	GPIO_SetupPinDirection(PORTD_ID, PIN1_ID, PIN_OUTPUT);
	GPIO_SetupPinDirection(PORTD_ID, PIN2_ID, PIN_OUTPUT);
	/*Configure data Pins in 8-bits mode*/
	GPIO_SetupPortDirection(PORTC_ID, PORT_OUTPUT);
	LCD_SendCommand(LCD_TWO_LINES_8_BITS);
#endif
	_delay_ms(20);
	LCD_SendCommand(LCD_CURSOR_OFF);
	LCD_SendCommand(LCD_CLEAR_DISPLAY);
}
/*
 * Description :
 * function to setup LCD to be Ready to send command
 * Setup pins:
 * 	1)write on Register Select--(Rs)= 0 to send command
 * 	2)Delay before Enable change from 0 to 1
 * 	3)write on Enable Pin--(E)= 1
 * 	4)Delay to wait before send command
 * 	5)send data on PORT
 * 	6)Delay before Enable change from 1 to 0
 * 	7)write on Enable Pin--(E)= 1
 * 	8)Delay to leave data on bus after E = 0
 *
 */

void LCD_SendCommand(uint8 Command)
{
#if		(LCD_DATA_MODE == 4)
	GPIO_WritePin(PORTA_ID, PIN1_ID, LOGIC_LOW);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN3_ID, GET_BIT(Command,4));
	GPIO_WritePin(PORTA_ID, PIN4_ID, GET_BIT(Command,5));
	GPIO_WritePin(PORTA_ID, PIN5_ID, GET_BIT(Command,6));
	GPIO_WritePin(PORTA_ID, PIN6_ID, GET_BIT(Command,7));
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN3_ID, GET_BIT(Command,0));
	GPIO_WritePin(PORTA_ID, PIN4_ID, GET_BIT(Command,1));
	GPIO_WritePin(PORTA_ID, PIN5_ID, GET_BIT(Command,2));
	GPIO_WritePin(PORTA_ID, PIN6_ID, GET_BIT(Command,3));
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
	_delay_ms(1);
#elif		(LCD_DATA_MODE == 8)
	GPIO_WritePin(PORTD_ID, PIN1_ID, LOGIC_LOW);
	GPIO_WritePin(PORTD_ID, PIN0_ID, LOGIC_LOW);
	_delay_ms(1);
	GPIO_WritePin(PORTD_ID, PIN2_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePort(PORTC_ID, Command);
	_delay_ms(1);
	GPIO_WritePin(PORTD_ID, PIN2_ID, LOGIC_LOW);
	_delay_ms(1);
#endif
}

/*
 * Description :
 * function to Display Character on LCD
 * Setup pins:
 * 	1)write on Register Select--(Rs)= 1 to send data
 * 	2)Delay before Enable change from 0 to 1
 * 	3)write on Enable Pin--(E)= 1
 * 	4)Delay to wait before send data
 * 	5)send Character on PORT
 * 	6)Delay before Enable change from 1 to 0
 * 	7)write on Enable Pin--(E)= 1
 * 	8)Delay to leave data on bus after E = 0
 *
 */

void LCD_DisplayCharacter(char Character)
{
#if		(LCD_DATA_MODE == 4)
	GPIO_WritePin(PORTA_ID, PIN1_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN3_ID, GET_BIT(Character,4));
	GPIO_WritePin(PORTA_ID, PIN4_ID, GET_BIT(Character,5));
	GPIO_WritePin(PORTA_ID, PIN5_ID, GET_BIT(Character,6));
	GPIO_WritePin(PORTA_ID, PIN6_ID, GET_BIT(Character,7));
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN3_ID, GET_BIT(Character,0));
	GPIO_WritePin(PORTA_ID, PIN4_ID, GET_BIT(Character,1));
	GPIO_WritePin(PORTA_ID, PIN5_ID, GET_BIT(Character,2));
	GPIO_WritePin(PORTA_ID, PIN6_ID, GET_BIT(Character,3));
	_delay_ms(1);
	GPIO_WritePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
	_delay_ms(1);
#elif		(LCD_DATA_MODE == 8)
	GPIO_WritePin(PORTD_ID, PIN0_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePin(PORTD_ID, PIN2_ID, LOGIC_HIGH);
	_delay_ms(1);
	GPIO_WritePort(PORTC_ID, Character);
	_delay_ms(1);
	GPIO_WritePin(PORTD_ID, PIN2_ID, LOGIC_LOW);
	_delay_ms(1);
#endif
}

/*
 * Description :
 * function to Display String on LCD using Function that Display Character to Display Character by Character
 */

void LCD_DisplayString(const char *String)
{
	while(*String != '\0')
	{
		LCD_DisplayCharacter(*String);
		String++;
	}
}

/*
 * Description :
 * function to Adjust Cursor by using Row and Column on LCD to begin Display from it
 */

void LCD_MoveCursor(uint8 Row, uint8 Column)
{
	uint8 LCD_Memory_Location;

	switch(Row)
	{
	case ROW0_ID:
		LCD_Memory_Location = Column;
		break;
	case ROW1_ID:
		LCD_Memory_Location = Column + 0x40;
		break;
	case ROW2_ID:
		LCD_Memory_Location = Column + 0x10;
		break;
	case ROW3_ID:
		LCD_Memory_Location = Column + 0x30;
		break;
	}

	LCD_SendCommand(LCD_SET_CURSOR_LOCATION|LCD_Memory_Location);
}

/*
 * Description :
 * function to Display String at determined location using Row and Column
 */
void LCD_DisplayStringRowColumn(uint8 Row, uint8 Column, const char *String)
{
	LCD_MoveCursor(Row, Column);
	LCD_DisplayString(String);
}

void LCD_IntegerToString(int Data)
{
	char Buff;
	itoa(Data, Buff,10);
	LCD_DisplayString(Buff);

}

void LCD_ClearDiplay(void)
{
	LCD_SendCommand(LCD_CLEAR_DISPLAY);
}


